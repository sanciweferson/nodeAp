{
  "version": 3,
  "sources": ["../../../../src/utils/openapi/commands/loadCommand.ts"],
  "sourcesContent": ["import type { AnyApiDefinitionFormat, AnyObject, LoadResult, Queue, Task } from '@/types/index'\nimport type { DereferenceOptions } from '@/utils/dereference'\nimport type { LoadOptions } from '@/utils/load/load'\nimport type { ValidateOptions } from '@/utils/validate'\nimport { details } from '../actions/details'\nimport { files } from '../actions/files'\nimport { get } from '../actions/get'\nimport { toJson } from '../actions/toJson'\nimport { toYaml } from '../actions/toYaml'\nimport { queueTask } from '../utils/queueTask'\nimport { dereferenceCommand } from './dereferenceCommand'\nimport { filterCommand } from './filterCommand'\nimport { upgradeCommand } from './upgradeCommand'\nimport { validateCommand } from './validateCommand'\n\ndeclare global {\n  interface Commands {\n    load: {\n      task: {\n        name: 'load'\n        options?: LoadOptions\n      }\n      result: LoadResult\n    }\n  }\n}\n\n/**\n * Pass any OpenAPI document\n */\nexport function loadCommand<T extends Task[]>(\n  previousQueue: Queue<T>,\n  input: AnyApiDefinitionFormat,\n  options?: LoadOptions,\n) {\n  const task = {\n    name: 'load',\n    options: {\n      // global\n      throwOnError: previousQueue.options?.throwOnError,\n      // local\n      ...options,\n    },\n  } as const\n\n  const queue = {\n    // Add the load task\n    ...queueTask<[...T, typeof task]>(previousQueue, task as Task),\n    // Add input to the queue\n    input,\n  }\n\n  return {\n    dereference: (dereferenceOptions?: DereferenceOptions) => dereferenceCommand(queue, dereferenceOptions),\n    details: () => details(queue),\n    files: () => files(queue),\n    filter: (callback: (specification: AnyObject) => boolean) => filterCommand(queue, callback),\n    get: () => get(queue),\n    upgrade: () => upgradeCommand(queue),\n    toJson: () => toJson(queue),\n    toYaml: () => toYaml(queue),\n    validate: (validateOptions?: ValidateOptions) => validateCommand(queue, validateOptions),\n  }\n}\n"],
  "mappings": "AAIA,SAAS,eAAe;AACxB,SAAS,aAAa;AACtB,SAAS,WAAW;AACpB,SAAS,cAAc;AACvB,SAAS,cAAc;AACvB,SAAS,iBAAiB;AAC1B,SAAS,0BAA0B;AACnC,SAAS,qBAAqB;AAC9B,SAAS,sBAAsB;AAC/B,SAAS,uBAAuB;AAiBzB,SAAS,YACd,eACA,OACA,SACA;AACA,QAAM,OAAO;AAAA,IACX,MAAM;AAAA,IACN,SAAS;AAAA;AAAA,MAEP,cAAc,cAAc,SAAS;AAAA;AAAA,MAErC,GAAG;AAAA,IACL;AAAA,EACF;AAEA,QAAM,QAAQ;AAAA;AAAA,IAEZ,GAAG,UAA+B,eAAe,IAAY;AAAA;AAAA,IAE7D;AAAA,EACF;AAEA,SAAO;AAAA,IACL,aAAa,CAAC,uBAA4C,mBAAmB,OAAO,kBAAkB;AAAA,IACtG,SAAS,MAAM,QAAQ,KAAK;AAAA,IAC5B,OAAO,MAAM,MAAM,KAAK;AAAA,IACxB,QAAQ,CAAC,aAAoD,cAAc,OAAO,QAAQ;AAAA,IAC1F,KAAK,MAAM,IAAI,KAAK;AAAA,IACpB,SAAS,MAAM,eAAe,KAAK;AAAA,IACnC,QAAQ,MAAM,OAAO,KAAK;AAAA,IAC1B,QAAQ,MAAM,OAAO,KAAK;AAAA,IAC1B,UAAU,CAAC,oBAAsC,gBAAgB,OAAO,eAAe;AAAA,EACzF;AACF;",
  "names": []
}
