{
  "version": 3,
  "sources": ["../../src/utils/upgrade-from-two-to-three.ts"],
  "sourcesContent": ["import type { OpenAPIV2, OpenAPIV3 } from '@scalar/openapi-types'\nimport type { UnknownObject } from '@scalar/types/utils'\n\nimport { traverse } from './traverse'\n\n/** Update the flow names to OpenAPI 3.1.0 format */\nconst upgradeFlow = (flow: string): 'implicit' | 'password' | 'clientCredentials' | 'authorizationCode' => {\n  switch (flow) {\n    case 'application':\n      return 'clientCredentials'\n    case 'accessCode':\n      return 'authorizationCode'\n    case 'implicit':\n      return 'implicit'\n    case 'password':\n      return 'password'\n    default:\n      return flow as never\n  }\n}\n\n/**\n * Upgrade Swagger 2.0 to OpenAPI 3.0\n *\n * https://swagger.io/blog/news/whats-new-in-openapi-3-0/\n */\nexport function upgradeFromTwoToThree(originalSpecification: UnknownObject) {\n  let specification = originalSpecification\n\n  // Version\n  if (\n    specification !== null &&\n    typeof specification === 'object' &&\n    typeof specification.swagger === 'string' &&\n    specification.swagger?.startsWith('2.0')\n  ) {\n    specification.openapi = '3.0.4'\n    delete specification.swagger\n  } else {\n    // Skip if it's something else than 3.0.x\n    return specification\n  }\n\n  // Servers\n  if (specification.host) {\n    const schemes =\n      Array.isArray(specification.schemes) && specification.schemes?.length ? specification.schemes : ['http']\n\n    specification.servers = schemes.map((scheme: string[]) => ({\n      url: `${scheme}://${specification.host}${specification.basePath ?? ''}`,\n    }))\n\n    delete specification.basePath\n    delete specification.schemes\n    delete specification.host\n  } else if (specification.basePath) {\n    specification.servers = [{ url: specification.basePath }]\n    delete specification.basePath\n  }\n\n  // Schemas\n  if (specification.definitions) {\n    specification.components = Object.assign({}, specification.components, {\n      schemas: specification.definitions,\n    })\n\n    delete specification.definitions\n\n    // Rewrite $refs to definitions\n    specification = traverse(specification, (schema) => {\n      // Rewrite $refs to components\n      if (typeof schema.$ref === 'string' && schema.$ref.startsWith('#/definitions/')) {\n        schema.$ref = schema.$ref.replace(/^#\\/definitions\\//, '#/components/schemas/')\n      }\n\n      return schema\n    })\n  }\n\n  // Transform file type to string with binary format\n  specification = traverse(specification, (schema) => {\n    if (schema.type === 'file') {\n      schema.type = 'string'\n      schema.format = 'binary'\n    }\n\n    return schema\n  })\n\n  // Paths\n  if (typeof specification.paths === 'object') {\n    for (const path in specification.paths) {\n      if (Object.hasOwn(specification.paths, path)) {\n        const pathItem = specification.paths[path]\n\n        for (const method in pathItem) {\n          if (Object.hasOwn(pathItem, method)) {\n            const operationItem = pathItem[method]\n\n            // Request bodies\n            if (operationItem.parameters) {\n              const bodyParameter = structuredClone(\n                operationItem.parameters.find((parameter: OpenAPIV3.ParameterObject) => parameter.in === 'body') ?? {},\n              )\n\n              if (bodyParameter && Object.keys(bodyParameter).length) {\n                delete bodyParameter.name\n                delete bodyParameter.in\n\n                const consumes = specification.consumes ?? operationItem.consumes ?? ['application/json']\n\n                if (typeof operationItem.requestBody !== 'object') {\n                  operationItem.requestBody = {}\n                }\n\n                if (typeof operationItem.requestBody.content !== 'object') {\n                  operationItem.requestBody.content = {}\n                }\n\n                const { schema, ...requestBody } = bodyParameter\n\n                operationItem.requestBody = {\n                  ...operationItem.requestBody,\n                  ...requestBody,\n                }\n\n                for (const type of consumes) {\n                  operationItem.requestBody.content[type] = {\n                    schema: schema,\n                  }\n                }\n              }\n\n              // Delete body parameter\n              operationItem.parameters = operationItem.parameters.filter(\n                (parameter: OpenAPIV2.ParameterObject) => parameter.in !== 'body',\n              )\n\n              delete operationItem.consumes\n\n              // formData parameters\n              const formDataParameters = operationItem.parameters.filter(\n                (parameter: OpenAPIV2.ParameterObject) => parameter.in === 'formData',\n              )\n\n              if (formDataParameters.length > 0) {\n                if (typeof operationItem.requestBody !== 'object') {\n                  operationItem.requestBody = {}\n                }\n\n                if (typeof operationItem.requestBody.content !== 'object') {\n                  operationItem.requestBody.content = {}\n                }\n\n                operationItem.requestBody.content['application/x-www-form-urlencoded'] = {\n                  schema: {\n                    type: 'object',\n                    properties: {},\n                    required: [], // Initialize required array\n                  },\n                }\n\n                for (const param of formDataParameters) {\n                  operationItem.requestBody.content['application/x-www-form-urlencoded'].schema.properties[param.name] =\n                    {\n                      type: param.type,\n                      description: param.description,\n                    }\n\n                  // Add to required array if param is required\n                  if (param.required) {\n                    operationItem.requestBody.content['application/x-www-form-urlencoded'].schema.required.push(\n                      param.name,\n                    )\n                  }\n                }\n\n                // Remove formData parameters from the parameters array\n                operationItem.parameters = operationItem.parameters.filter(\n                  (parameter: OpenAPIV2.ParameterObject) => parameter.in !== 'formData',\n                )\n              }\n\n              operationItem.parameters = operationItem.parameters.map((parameter) =>\n                transformParameterObject(parameter),\n              )\n            }\n\n            // Responses\n            if (operationItem.responses) {\n              for (const response in operationItem.responses) {\n                if (Object.hasOwn(operationItem.responses, response)) {\n                  const responseItem = operationItem.responses[response]\n\n                  if (responseItem.headers) {\n                    responseItem.headers = Object.entries(responseItem.headers).reduce((acc, [name, header]) => {\n                      return {\n                        [name]: transformParameterObject(header),\n                        ...acc,\n                      }\n                    }, {})\n                  }\n                  if (responseItem.schema) {\n                    const produces = specification.produces ?? operationItem.produces ?? ['application/json']\n\n                    if (typeof responseItem.content !== 'object') {\n                      responseItem.content = {}\n                    }\n\n                    for (const type of produces) {\n                      responseItem.content[type] = {\n                        schema: responseItem.schema,\n                      }\n                    }\n\n                    delete responseItem.schema\n                  }\n                }\n              }\n            }\n\n            delete operationItem.produces\n\n            // Delete empty parameters\n            if (operationItem.parameters?.length === 0) {\n              delete operationItem.parameters\n            }\n          }\n        }\n      }\n    }\n  }\n\n  // Upgrade securityDefinitions\n  if (specification.securityDefinitions) {\n    if (typeof specification.components !== 'object') {\n      specification.components = {}\n    }\n\n    // Assert that components is of type OpenAPIV3.ComponentsObject\n    specification.components = specification.components as OpenAPIV3.ComponentsObject\n\n    Object.assign(specification.components, { securitySchemes: {} })\n\n    for (const [key, securityScheme] of Object.entries(specification.securityDefinitions)) {\n      if (typeof securityScheme === 'object') {\n        if ('type' in securityScheme && securityScheme.type === 'oauth2') {\n          const { flow, authorizationUrl, tokenUrl, scopes } = securityScheme as {\n            type: 'oauth2'\n            flow?: string\n            authorizationUrl?: string\n            tokenUrl?: string\n            scopes?: Record<string, string>\n          }\n\n          // Convert flow values to OpenAPI 3.1.0 format\n\n          // Assert that securitySchemes is of type OpenAPIV3.SecuritySchemeObject\n          Object.assign((specification.components as OpenAPIV3.ComponentsObject).securitySchemes, {\n            [key]: {\n              type: 'oauth2',\n              flows: {\n                [upgradeFlow(flow)]: Object.assign(\n                  {},\n                  authorizationUrl && { authorizationUrl },\n                  tokenUrl && { tokenUrl },\n                  scopes && { scopes },\n                ),\n              },\n            },\n          })\n        } else if ('type' in securityScheme && securityScheme.type === 'basic') {\n          Object.assign((specification.components as OpenAPIV3.ComponentsObject).securitySchemes, {\n            [key]: {\n              type: 'http',\n              scheme: 'basic',\n            },\n          })\n        } else {\n          Object.assign((specification.components as OpenAPIV3.ComponentsObject).securitySchemes, {\n            [key]: securityScheme,\n          })\n        }\n      }\n    }\n\n    delete specification.securityDefinitions\n  }\n\n  return specification as OpenAPIV3.Document\n}\n\nfunction transformItemsObject<T extends Record<PropertyKey, unknown>>(obj: T): OpenAPIV3.SchemaObject {\n  const schemaProperties = [\n    'type',\n    'format',\n    'items',\n    'maximum',\n    'exclusiveMaximum',\n    'minimum',\n    'exclusiveMinimum',\n    'maxLength',\n    'minLength',\n    'pattern',\n    'maxItems',\n    'minItems',\n    'uniqueItems',\n    'enum',\n    'multipleOf',\n  ]\n\n  return schemaProperties.reduce((acc, property) => {\n    if (Object.hasOwn(obj, property)) {\n      acc[property] = obj[property]\n      delete obj[property]\n    }\n\n    return acc\n  }, {} as OpenAPIV3.SchemaObject)\n}\n\nfunction transformParameterObject(parameter: OpenAPIV2.ParameterObject): OpenAPIV3.ParameterObject {\n  // it is important to call getParameterSerializationStyle first because transformItemsObject modifies properties on which getParameterSerializationStyle rely on\n  const serializationStyle = getParameterSerializationStyle(parameter)\n  const schema = transformItemsObject(parameter)\n\n  delete parameter.collectionFormat\n  delete parameter.default\n\n  return {\n    schema,\n    ...serializationStyle,\n    ...parameter,\n  }\n}\n\ntype CollectionFormat = 'csv' | 'ssv' | 'tsv' | 'pipes' | 'multi'\n\ntype ParameterSerializationStyle = { style?: string; explode?: boolean }\n\nconst querySerialization: Record<CollectionFormat, ParameterSerializationStyle> = {\n  ssv: {\n    style: 'spaceDelimited',\n    explode: false,\n  },\n  pipes: {\n    style: 'pipeDelimited',\n    explode: false,\n  },\n  multi: {\n    style: 'form',\n    explode: true,\n  },\n  csv: {\n    style: 'form',\n    explode: false,\n  },\n  tsv: {},\n}\n\nconst pathAndHeaderSerialization: Record<CollectionFormat, ParameterSerializationStyle> = {\n  ssv: {},\n  pipes: {},\n  multi: {},\n  csv: {\n    style: 'simple',\n    explode: false,\n  },\n  tsv: {},\n}\n\nconst serializationStyles = {\n  header: pathAndHeaderSerialization,\n  query: querySerialization,\n  path: pathAndHeaderSerialization,\n} as const\n\nfunction getParameterSerializationStyle(parameter: OpenAPIV2.ParameterObject): ParameterSerializationStyle {\n  if (\n    parameter.type !== 'array' ||\n    !(parameter.in === 'query' || parameter.in === 'path' || parameter.in === 'header')\n  ) {\n    return {}\n  }\n\n  const collectionFormat = parameter.collectionFormat ?? 'csv'\n\n  return serializationStyles[parameter.in][collectionFormat]\n}\n"],
  "mappings": "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",
  "names": []
}
