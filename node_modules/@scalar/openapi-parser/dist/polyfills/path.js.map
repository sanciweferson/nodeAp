{
  "version": 3,
  "sources": ["../../src/polyfills/path.ts"],
  "sourcesContent": ["// @ts-nocheck\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  let up = 0\n  for (let i = parts.length - 1; i >= 0; i--) {\n    const last = parts[i]\n    if (last === '.') {\n      parts.splice(i, 1)\n    } else if (last === '..') {\n      parts.splice(i, 1)\n      up++\n    } else if (up) {\n      parts.splice(i, 1)\n      up--\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..')\n    }\n  }\n\n  return parts\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nconst splitPathRe = /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^/]+?|)(\\.[^./]*|))(?:[/]*)$/\nconst splitPath = (filename) => splitPathRe.exec(filename).slice(1)\n\n// path.resolve([from ...], to)\n// posix version\nexport function resolve(...parameters) {\n  let resolvedPath = '',\n    resolvedAbsolute = false\n\n  for (let i = parameters.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    const path = i >= 0 ? parameters[i] : '/'\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings')\n    }\n    if (!path) {\n      continue\n    }\n\n    resolvedPath = path + '/' + resolvedPath\n    resolvedAbsolute = path.charAt(0) === '/'\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(\n    filter(resolvedPath.split('/'), (p) => !!p),\n    !resolvedAbsolute,\n  ).join('/')\n\n  return (resolvedAbsolute ? '/' : '') + resolvedPath || '.'\n}\n\n// path.normalize(path)\n// posix version\nexport function normalize(path) {\n  const isPathAbsolute = isAbsolute(path),\n    trailingSlash = substr(path, -1) === '/'\n\n  // Normalize the path\n  path = normalizeArray(\n    filter(path.split('/'), (p) => !!p),\n    !isPathAbsolute,\n  ).join('/')\n\n  if (!path && !isPathAbsolute) {\n    path = '.'\n  }\n  if (path && trailingSlash) {\n    path += '/'\n  }\n\n  return (isPathAbsolute ? '/' : '') + path\n}\n\n// posix version\nexport function isAbsolute(path) {\n  return path.charAt(0) === '/'\n}\n\n// posix version\nexport function join(...paths: string[]) {\n  return normalize(\n    filter(paths, (p, _index) => {\n      if (typeof p !== 'string') {\n        throw new TypeError('Arguments to path.join must be strings')\n      }\n      return p\n    }).join('/'),\n  )\n}\n\n// path.relative(from, to)\n// posix version\nexport function relative(from, to) {\n  from = resolve(from).substr(1)\n  to = resolve(to).substr(1)\n\n  function trim(arr) {\n    let start = 0\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') {\n        break\n      }\n    }\n\n    let end = arr.length - 1\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') {\n        break\n      }\n    }\n\n    if (start > end) {\n      return []\n    }\n    return arr.slice(start, end - start + 1)\n  }\n\n  const fromParts = trim(from.split('/'))\n  const toParts = trim(to.split('/'))\n\n  const length = Math.min(fromParts.length, toParts.length)\n  let samePartsLength = length\n  for (let i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i\n      break\n    }\n  }\n\n  let outputParts = []\n  for (let i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..')\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength))\n\n  return outputParts.join('/')\n}\n\nexport const sep = '/'\nexport const delimiter = ':'\n\nexport function dirname(path) {\n  const result = splitPath(path),\n    root = result[0]\n\n  let dir = result[1]\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.'\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1)\n  }\n\n  return root + dir\n}\n\nexport function basename(path, ext) {\n  let f = splitPath(path)[2]\n  // TODO: make this comparison case-insensitive on windows?\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length)\n  }\n  return f\n}\n\nexport function extname(path) {\n  return splitPath(path)[3]\n}\nexport default {\n  extname: extname,\n  basename: basename,\n  dirname: dirname,\n  sep: sep,\n  delimiter: delimiter,\n  relative: relative,\n  join: join,\n  isAbsolute: isAbsolute,\n  normalize: normalize,\n  resolve: resolve,\n}\nfunction filter(xs, f) {\n  if (xs.filter) {\n    return xs.filter(f)\n  }\n  const res = []\n  for (let i = 0; i < xs.length; i++) {\n    if (f(xs[i], i, xs)) {\n      res.push(xs[i])\n    }\n  }\n  return res\n}\n\n// String.prototype.substr - negative index don't work in IE8\nconst substr =\n  'ab'.substr(-1) === 'b'\n    ? (str, start, len) => str.substr(start, len)\n    : (str, start, len) => {\n        if (start < 0) {\n          start = str.length + start\n        }\n        return str.substr(start, len)\n      }\n"],
  "mappings": "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",
  "names": []
}
