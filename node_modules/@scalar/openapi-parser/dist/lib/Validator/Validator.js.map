{
  "version": 3,
  "sources": ["../../../src/lib/Validator/Validator.ts"],
  "sourcesContent": ["import Ajv04 from 'ajv-draft-04'\nimport addFormats from 'ajv-formats'\nimport Ajv2020 from 'ajv/dist/2020.js'\n\nimport { ERRORS, OpenApiSpecifications, type OpenApiVersion, OpenApiVersions } from '@/configuration'\nimport type { AnyObject, Filesystem, ThrowOnErrorOption, ValidateResult } from '@/types/index'\nimport { details as getOpenApiVersion } from '@/utils/details'\nimport { resolveReferences } from '@/utils/resolve-references'\nimport { transformErrors } from '@/utils/transform-errors'\n\n/**\n * Configure available JSON Schema versions\n */\nexport const jsonSchemaVersions = {\n  'http://json-schema.org/draft-04/schema#': Ajv04,\n  'https://json-schema.org/draft/2020-12/schema': Ajv2020,\n}\n\nexport class Validator {\n  public version: '2.0' | '3.0' | '3.1'\n\n  public static supportedVersions = OpenApiVersions\n\n  // Object with function *or* object { errors: string }\n  protected ajvValidators: Record<\n    string,\n    ((specification: AnyObject) => boolean) & {\n      errors: string\n    }\n  > = {}\n\n  protected errors: string\n\n  protected specificationVersion: string\n\n  protected specificationType: string\n\n  public specification: AnyObject\n\n  /**\n   * Checks whether a specification is valid and all references can be resolved.\n   */\n  async validate(filesystem: Filesystem, options?: ThrowOnErrorOption): Promise<ValidateResult> {\n    const entrypoint = filesystem.find((file) => file.isEntrypoint)\n    const specification = entrypoint?.specification\n\n    // TODO: How does this work with a filesystem?\n    this.specification = specification\n\n    // TODO: defaulting info.version to keep parser compatible with the previous one\n    // we should bubble this error up and not throw on it\n    if (this.specification?.info && !this.specification.info.version) {\n      this.specification.info.version = '0.0.1'\n    }\n\n    try {\n      // AnyObject is empty or invalid\n      if (specification === undefined || specification === null) {\n        if (options?.throwOnError) {\n          throw new Error(ERRORS.EMPTY_OR_INVALID)\n        }\n\n        return {\n          valid: false,\n          errors: transformErrors(entrypoint, ERRORS.EMPTY_OR_INVALID),\n        }\n      }\n\n      // Meta data about the specification\n      const { version, specificationType, specificationVersion } = getOpenApiVersion(specification)\n\n      this.version = version\n      this.specificationVersion = specificationVersion\n      this.specificationType = specificationType\n\n      // AnyObject is not supported\n      if (!version) {\n        if (options?.throwOnError) {\n          throw new Error(ERRORS.OPENAPI_VERSION_NOT_SUPPORTED)\n        }\n\n        return {\n          valid: false,\n          errors: transformErrors(entrypoint, ERRORS.OPENAPI_VERSION_NOT_SUPPORTED),\n        }\n      }\n\n      // Get the correct OpenAPI validator\n      const validateSchema = await this.getAjvValidator(version)\n      const schemaResult = validateSchema(specification)\n\n      // Error handling\n      if (validateSchema.errors) {\n        if (validateSchema.errors.length > 0) {\n          if (options?.throwOnError) {\n            throw new Error(validateSchema.errors[0])\n          }\n\n          return {\n            valid: false,\n            errors: transformErrors(entrypoint, validateSchema.errors),\n          }\n        }\n      }\n\n      // Check if the references are valid\n      const resolvedReferences = resolveReferences(filesystem, options)\n\n      return {\n        valid: schemaResult && resolvedReferences.valid,\n        errors: [...(schemaResult.errors ?? []), ...resolvedReferences.errors],\n        schema: resolvedReferences.schema,\n      }\n    } catch (error) {\n      // Something went horribly wrong!\n      if (options?.throwOnError) {\n        throw error\n      }\n\n      return {\n        valid: false,\n        errors: transformErrors(entrypoint, error.message ?? error),\n      }\n    }\n  }\n\n  /**\n   * Ajv JSON schema validator\n   */\n  async getAjvValidator(version: OpenApiVersion) {\n    // Schema loaded already\n    if (this.ajvValidators[version]) {\n      return this.ajvValidators[version]\n    }\n\n    // Load OpenAPI Schema\n    const schema = OpenApiSpecifications[version]\n\n    // Load JSON Schema\n    const AjvClass = jsonSchemaVersions[schema.$schema]\n\n    // Get the correct Ajv validator\n    const ajv = new AjvClass({\n      // Ajv is a bit too strict in its strict validation of OpenAPI schemas.\n      // Switch strict mode off.\n      strict: false,\n    })\n\n    // Register formats\n    // https://ajv.js.org/packages/ajv-formats.html#formats\n    addFormats(ajv)\n\n    // OpenAPI 3.1 uses media-range format\n    if (version === '3.1') {\n      ajv.addFormat('media-range', true)\n    }\n\n    return (this.ajvValidators[version] = ajv.compile(schema))\n  }\n}\n"],
  "mappings": "AAAA,OAAO,WAAW;AAClB,OAAO,gBAAgB;AACvB,OAAO,aAAa;AAEpB,SAAS,QAAQ,uBAA4C,uBAAuB;AAEpF,SAAS,WAAW,yBAAyB;AAC7C,SAAS,yBAAyB;AAClC,SAAS,uBAAuB;AAKzB,MAAM,qBAAqB;AAAA,EAChC,2CAA2C;AAAA,EAC3C,gDAAgD;AAClD;AAEO,MAAM,UAAU;AAAA,EACd;AAAA,EAEP,OAAc,oBAAoB;AAAA;AAAA,EAGxB,gBAKN,CAAC;AAAA,EAEK;AAAA,EAEA;AAAA,EAEA;AAAA,EAEH;AAAA;AAAA;AAAA;AAAA,EAKP,MAAM,SAAS,YAAwB,SAAuD;AAC5F,UAAM,aAAa,WAAW,KAAK,CAAC,SAAS,KAAK,YAAY;AAC9D,UAAM,gBAAgB,YAAY;AAGlC,SAAK,gBAAgB;AAIrB,QAAI,KAAK,eAAe,QAAQ,CAAC,KAAK,cAAc,KAAK,SAAS;AAChE,WAAK,cAAc,KAAK,UAAU;AAAA,IACpC;AAEA,QAAI;AAEF,UAAI,kBAAkB,UAAa,kBAAkB,MAAM;AACzD,YAAI,SAAS,cAAc;AACzB,gBAAM,IAAI,MAAM,OAAO,gBAAgB;AAAA,QACzC;AAEA,eAAO;AAAA,UACL,OAAO;AAAA,UACP,QAAQ,gBAAgB,YAAY,OAAO,gBAAgB;AAAA,QAC7D;AAAA,MACF;AAGA,YAAM,EAAE,SAAS,mBAAmB,qBAAqB,IAAI,kBAAkB,aAAa;AAE5F,WAAK,UAAU;AACf,WAAK,uBAAuB;AAC5B,WAAK,oBAAoB;AAGzB,UAAI,CAAC,SAAS;AACZ,YAAI,SAAS,cAAc;AACzB,gBAAM,IAAI,MAAM,OAAO,6BAA6B;AAAA,QACtD;AAEA,eAAO;AAAA,UACL,OAAO;AAAA,UACP,QAAQ,gBAAgB,YAAY,OAAO,6BAA6B;AAAA,QAC1E;AAAA,MACF;AAGA,YAAM,iBAAiB,MAAM,KAAK,gBAAgB,OAAO;AACzD,YAAM,eAAe,eAAe,aAAa;AAGjD,UAAI,eAAe,QAAQ;AACzB,YAAI,eAAe,OAAO,SAAS,GAAG;AACpC,cAAI,SAAS,cAAc;AACzB,kBAAM,IAAI,MAAM,eAAe,OAAO,CAAC,CAAC;AAAA,UAC1C;AAEA,iBAAO;AAAA,YACL,OAAO;AAAA,YACP,QAAQ,gBAAgB,YAAY,eAAe,MAAM;AAAA,UAC3D;AAAA,QACF;AAAA,MACF;AAGA,YAAM,qBAAqB,kBAAkB,YAAY,OAAO;AAEhE,aAAO;AAAA,QACL,OAAO,gBAAgB,mBAAmB;AAAA,QAC1C,QAAQ,CAAC,GAAI,aAAa,UAAU,CAAC,GAAI,GAAG,mBAAmB,MAAM;AAAA,QACrE,QAAQ,mBAAmB;AAAA,MAC7B;AAAA,IACF,SAAS,OAAO;AAEd,UAAI,SAAS,cAAc;AACzB,cAAM;AAAA,MACR;AAEA,aAAO;AAAA,QACL,OAAO;AAAA,QACP,QAAQ,gBAAgB,YAAY,MAAM,WAAW,KAAK;AAAA,MAC5D;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,gBAAgB,SAAyB;AAE7C,QAAI,KAAK,cAAc,OAAO,GAAG;AAC/B,aAAO,KAAK,cAAc,OAAO;AAAA,IACnC;AAGA,UAAM,SAAS,sBAAsB,OAAO;AAG5C,UAAM,WAAW,mBAAmB,OAAO,OAAO;AAGlD,UAAM,MAAM,IAAI,SAAS;AAAA;AAAA;AAAA,MAGvB,QAAQ;AAAA,IACV,CAAC;AAID,eAAW,GAAG;AAGd,QAAI,YAAY,OAAO;AACrB,UAAI,UAAU,eAAe,IAAI;AAAA,IACnC;AAEA,WAAQ,KAAK,cAAc,OAAO,IAAI,IAAI,QAAQ,MAAM;AAAA,EAC1D;AACF;",
  "names": []
}
