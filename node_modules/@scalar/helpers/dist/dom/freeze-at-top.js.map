{
  "version": 3,
  "sources": ["../../src/dom/freeze-at-top.ts"],
  "sourcesContent": ["/**\n * Freezes an element at the top of the viewport using a mutation observer to check if the element has entered the dom\n * Differs from freezeElement as the element doesn't need to exist yet\n */\nexport const freezeAtTop = (id: string) => {\n  if (!id) {\n    return () => null\n  }\n\n  let rafId: number | null = null\n  let element = document.getElementById(id)\n\n  // Create mutation observer to watch for DOM changes\n  const observer = new MutationObserver(() => {\n    element ||= document.getElementById(id)\n\n    if (!element) {\n      return\n    }\n\n    // Cancel any pending animation frame\n    if (rafId !== null) {\n      cancelAnimationFrame(rafId)\n    }\n\n    // Schedule the scroll adjustment for the next frame\n    rafId = requestAnimationFrame(() => {\n      element?.scrollIntoView()\n      rafId = null\n    })\n  })\n\n  // Start observing with more specific configuration\n  observer.observe(document.body, {\n    childList: true,\n    subtree: true,\n  })\n\n  // Return function to stop maintaining position\n  return () => {\n    if (rafId !== null) {\n      cancelAnimationFrame(rafId)\n    }\n    observer.disconnect()\n  }\n}\n"],
  "mappings": "AAIO,MAAM,cAAc,CAAC,OAAe;AACzC,MAAI,CAAC,IAAI;AACP,WAAO,MAAM;AAAA,EACf;AAEA,MAAI,QAAuB;AAC3B,MAAI,UAAU,SAAS,eAAe,EAAE;AAGxC,QAAM,WAAW,IAAI,iBAAiB,MAAM;AAC1C,gBAAY,SAAS,eAAe,EAAE;AAEtC,QAAI,CAAC,SAAS;AACZ;AAAA,IACF;AAGA,QAAI,UAAU,MAAM;AAClB,2BAAqB,KAAK;AAAA,IAC5B;AAGA,YAAQ,sBAAsB,MAAM;AAClC,eAAS,eAAe;AACxB,cAAQ;AAAA,IACV,CAAC;AAAA,EACH,CAAC;AAGD,WAAS,QAAQ,SAAS,MAAM;AAAA,IAC9B,WAAW;AAAA,IACX,SAAS;AAAA,EACX,CAAC;AAGD,SAAO,MAAM;AACX,QAAI,UAAU,MAAM;AAClB,2BAAqB,KAAK;AAAA,IAC5B;AACA,aAAS,WAAW;AAAA,EACtB;AACF;",
  "names": []
}
