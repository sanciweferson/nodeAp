{
  "version": 3,
  "sources": ["../../src/object/local-storage.ts"],
  "sourcesContent": ["/**\n * localStorage keys for resources\n * DO NOT CHANGE THESE AS IT WILL BREAK THE MIGRATION\n */\nexport const LS_KEYS = {\n  COLLECTION: 'collection',\n  COOKIE: 'cookie',\n  ENVIRONMENT: 'environment',\n  REQUEST: 'request',\n  REQUEST_EXAMPLE: 'requestExample',\n  SECURITY_SCHEME: 'securityScheme',\n  SERVER: 'server',\n  TAG: 'tag',\n  WORKSPACE: 'workspace',\n} as const\n\n/**\n * localStorage keys for all reference resources\n * to ensure we do not have any conflicts\n */\nexport const REFERENCE_LS_KEYS = {\n  /**\n   * We should remove after some time as we no longer store an object\n   * @deprecated\n   */\n  SELECTED_CLIENT_DEPRECATED: 'scalar-reference-selected-client',\n  /**\n   * Store the selected client as a string in localStorage\n   */\n  SELECTED_CLIENT: 'scalar-reference-selected-client-v2',\n} as const\n\n/**\n * localStorage keys for all client resources\n * to ensure we do not have any conflicts\n */\nexport const CLIENT_LS_KEYS = {\n  AUTH: 'scalar-client-auth',\n  SELECTED_SECURITY_SCHEMES: 'scalar-client-selected-security-schemes',\n} as const\n\n/** SSR safe alias for localStorage */\nexport const safeLocalStorage = () =>\n  typeof window === 'undefined'\n    ? {\n        getItem: () => null,\n        setItem: () => null,\n        removeItem: () => null,\n      }\n    : localStorage\n"],
  "mappings": "AAIO,MAAM,UAAU;AAAA,EACrB,YAAY;AAAA,EACZ,QAAQ;AAAA,EACR,aAAa;AAAA,EACb,SAAS;AAAA,EACT,iBAAiB;AAAA,EACjB,iBAAiB;AAAA,EACjB,QAAQ;AAAA,EACR,KAAK;AAAA,EACL,WAAW;AACb;AAMO,MAAM,oBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA,EAK/B,4BAA4B;AAAA;AAAA;AAAA;AAAA,EAI5B,iBAAiB;AACnB;AAMO,MAAM,iBAAiB;AAAA,EAC5B,MAAM;AAAA,EACN,2BAA2B;AAC7B;AAGO,MAAM,mBAAmB,MAC9B,OAAO,WAAW,cACd;AAAA,EACE,SAAS,MAAM;AAAA,EACf,SAAS,MAAM;AAAA,EACf,YAAY,MAAM;AACpB,IACA;",
  "names": []
}
