{
  "version": 3,
  "sources": ["../../src/url/merge-urls.ts"],
  "sourcesContent": ["import { REGEX } from '@/regex/regex-helpers'\nimport { isRelativePath } from './is-relative-path'\nimport { ensureProtocol } from './ensure-protocol'\n\n/**\n * Merges multiple URLSearchParams objects, preserving multiple values per param\n * within each source, but later sources overwrite earlier ones completely\n * This should de-dupe our query params while allowing multiple keys for \"arrays\"\n */\nexport const mergeSearchParams = (...params: URLSearchParams[]): URLSearchParams => {\n  // We keep a merged record to ensure the next group will overwrite the previous\n  const merged: Record<string, string | string[]> = {}\n\n  // Loops over each group and grabs unique keys\n  params.forEach((p) => {\n    const keys = Array.from(p.keys())\n    const uniqueKeys = new Set(keys)\n\n    uniqueKeys.forEach((key) => {\n      const values = p.getAll(key)\n      const value = values.length > 1 ? values : (values[0] ?? '')\n\n      merged[key] = value\n    })\n  })\n\n  const result = new URLSearchParams()\n\n  // We maintain multiple values for each key if they existed\n  Object.entries(merged).forEach(([key, value]) => {\n    if (Array.isArray(value)) {\n      value.forEach((v) => result.append(key, v))\n    } else {\n      result.append(key, value)\n    }\n  })\n\n  return result\n}\n\n/** Combines a base URL and a path ensuring there's only one slash between them */\nexport const combineUrlAndPath = (url: string, path: string) => {\n  if (!path || url === path) {\n    return url.trim()\n  }\n\n  if (!url) {\n    return path.trim()\n  }\n\n  return `${url.trim()}/${path.trim()}`.replace(REGEX.MULTIPLE_SLASHES, '/')\n}\n\n/**\n * Creates a URL from the path and server\n * also optionally merges query params if you include urlSearchParams\n * This was re-written without using URL to support variables in the scheme\n */\nexport const mergeUrls = (\n  url: string,\n  path: string,\n  urlParams: URLSearchParams = new URLSearchParams(),\n  /** To disable prefixing the url with the origin or a scheme*/\n  disableOriginPrefix = false,\n) => {\n  // Extract and merge all query params\n  if (url && (!isRelativePath(url) || typeof window !== 'undefined')) {\n    /** Prefix the url with the origin if it is relative and we wish to */\n    const base = disableOriginPrefix\n      ? url\n      : isRelativePath(url)\n        ? combineUrlAndPath(window.location.origin, url)\n        : ensureProtocol(url)\n\n    // Extract search params from base URL if any\n    const [baseUrl = '', baseQuery] = base.split('?')\n    const baseParams = new URLSearchParams(baseQuery || '')\n\n    // Extract search params from path if any\n    const [pathWithoutQuery = '', pathQuery] = path.split('?')\n    const pathParams = new URLSearchParams(pathQuery || '')\n\n    // Merge the baseUrl and path\n    const mergedUrl = url === path ? baseUrl : combineUrlAndPath(baseUrl, pathWithoutQuery)\n\n    // Merge all search params\n    const mergedSearchParams = mergeSearchParams(baseParams, pathParams, urlParams)\n\n    // Build the final URL\n    const search = mergedSearchParams.toString()\n    return search ? `${mergedUrl}?${search}` : mergedUrl\n  }\n  if (path) {\n    return combineUrlAndPath(url, path)\n  }\n  return ''\n}\n"],
  "mappings": "AAAA,SAAS,aAAa;AACtB,SAAS,sBAAsB;AAC/B,SAAS,sBAAsB;AAOxB,MAAM,oBAAoB,IAAI,WAA+C;AAElF,QAAM,SAA4C,CAAC;AAGnD,SAAO,QAAQ,CAAC,MAAM;AACpB,UAAM,OAAO,MAAM,KAAK,EAAE,KAAK,CAAC;AAChC,UAAM,aAAa,IAAI,IAAI,IAAI;AAE/B,eAAW,QAAQ,CAAC,QAAQ;AAC1B,YAAM,SAAS,EAAE,OAAO,GAAG;AAC3B,YAAM,QAAQ,OAAO,SAAS,IAAI,SAAU,OAAO,CAAC,KAAK;AAEzD,aAAO,GAAG,IAAI;AAAA,IAChB,CAAC;AAAA,EACH,CAAC;AAED,QAAM,SAAS,IAAI,gBAAgB;AAGnC,SAAO,QAAQ,MAAM,EAAE,QAAQ,CAAC,CAAC,KAAK,KAAK,MAAM;AAC/C,QAAI,MAAM,QAAQ,KAAK,GAAG;AACxB,YAAM,QAAQ,CAAC,MAAM,OAAO,OAAO,KAAK,CAAC,CAAC;AAAA,IAC5C,OAAO;AACL,aAAO,OAAO,KAAK,KAAK;AAAA,IAC1B;AAAA,EACF,CAAC;AAED,SAAO;AACT;AAGO,MAAM,oBAAoB,CAAC,KAAa,SAAiB;AAC9D,MAAI,CAAC,QAAQ,QAAQ,MAAM;AACzB,WAAO,IAAI,KAAK;AAAA,EAClB;AAEA,MAAI,CAAC,KAAK;AACR,WAAO,KAAK,KAAK;AAAA,EACnB;AAEA,SAAO,GAAG,IAAI,KAAK,CAAC,IAAI,KAAK,KAAK,CAAC,GAAG,QAAQ,MAAM,kBAAkB,GAAG;AAC3E;AAOO,MAAM,YAAY,CACvB,KACA,MACA,YAA6B,IAAI,gBAAgB,GAEjD,sBAAsB,UACnB;AAEH,MAAI,QAAQ,CAAC,eAAe,GAAG,KAAK,OAAO,WAAW,cAAc;AAElE,UAAM,OAAO,sBACT,MACA,eAAe,GAAG,IAChB,kBAAkB,OAAO,SAAS,QAAQ,GAAG,IAC7C,eAAe,GAAG;AAGxB,UAAM,CAAC,UAAU,IAAI,SAAS,IAAI,KAAK,MAAM,GAAG;AAChD,UAAM,aAAa,IAAI,gBAAgB,aAAa,EAAE;AAGtD,UAAM,CAAC,mBAAmB,IAAI,SAAS,IAAI,KAAK,MAAM,GAAG;AACzD,UAAM,aAAa,IAAI,gBAAgB,aAAa,EAAE;AAGtD,UAAM,YAAY,QAAQ,OAAO,UAAU,kBAAkB,SAAS,gBAAgB;AAGtF,UAAM,qBAAqB,kBAAkB,YAAY,YAAY,SAAS;AAG9E,UAAM,SAAS,mBAAmB,SAAS;AAC3C,WAAO,SAAS,GAAG,SAAS,IAAI,MAAM,KAAK;AAAA,EAC7C;AACA,MAAI,MAAM;AACR,WAAO,kBAAkB,KAAK,IAAI;AAAA,EACpC;AACA,SAAO;AACT;",
  "names": []
}
