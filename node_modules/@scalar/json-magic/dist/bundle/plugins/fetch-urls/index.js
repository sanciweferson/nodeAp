import { normalize } from "../../../utils/normalize.js";
import { createLimiter } from "../../../bundle/create-limiter.js";
import { isRemoteUrl } from "../../../bundle/bundle.js";
const getHost = (url) => {
  try {
    return new URL(url).host;
  } catch {
    return null;
  }
};
async function fetchUrl(url, limiter, config) {
  try {
    const host = getHost(url);
    const headers = config?.headers?.find((a) => a.domains.find((d) => d === host) !== void 0)?.headers;
    const exec = config?.fetch ?? fetch;
    const result = await limiter(
      () => exec(url, {
        headers
      })
    );
    if (result.ok) {
      const body = await result.text();
      return {
        ok: true,
        data: normalize(body)
      };
    }
    return {
      ok: false
    };
  } catch {
    return {
      ok: false
    };
  }
}
function fetchUrls(config) {
  const limiter = config?.limit ? createLimiter(config.limit) : (fn) => fn();
  return {
    type: "loader",
    validate: isRemoteUrl,
    exec: (value) => fetchUrl(value, limiter, config)
  };
}
export {
  fetchUrl,
  fetchUrls
};
//# sourceMappingURL=index.js.map
