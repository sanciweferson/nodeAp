{
  "version": 3,
  "sources": ["../../src/bundle/create-limiter.ts"],
  "sourcesContent": ["/**\n * Creates a function that limits the number of concurrent executions of async functions.\n *\n * @param maxConcurrent - Maximum number of concurrent executions allowed\n * @returns A function that wraps async functions to limit their concurrent execution\n *\n * @example\n * ```ts\n * const limiter = createLimiter(2) // Allow max 2 concurrent executions\n *\n * // These will run with max 2 at a time\n * const results = await Promise.all([\n *   limiter(() => fetch('/api/1')),\n *   limiter(() => fetch('/api/2')),\n *   limiter(() => fetch('/api/3')),\n *   limiter(() => fetch('/api/4'))\n * ])\n * ```\n */\nexport function createLimiter(maxConcurrent: number) {\n  let activeCount = 0\n  const queue: (() => void)[] = []\n\n  const next = () => {\n    if (queue.length === 0 || activeCount >= maxConcurrent) {\n      return\n    }\n\n    const resolve = queue.shift()\n\n    if (resolve) {\n      resolve()\n    }\n  }\n\n  const run = async <T>(fn: () => Promise<T>): Promise<T> => {\n    if (activeCount >= maxConcurrent) {\n      await new Promise<void>((resolve) => queue.push(resolve))\n    }\n\n    activeCount++\n    try {\n      const result = await fn()\n      return result\n    } finally {\n      activeCount--\n      next()\n    }\n  }\n\n  return run\n}\n"],
  "mappings": "AAmBO,SAAS,cAAc,eAAuB;AACnD,MAAI,cAAc;AAClB,QAAM,QAAwB,CAAC;AAE/B,QAAM,OAAO,MAAM;AACjB,QAAI,MAAM,WAAW,KAAK,eAAe,eAAe;AACtD;AAAA,IACF;AAEA,UAAM,UAAU,MAAM,MAAM;AAE5B,QAAI,SAAS;AACX,cAAQ;AAAA,IACV;AAAA,EACF;AAEA,QAAM,MAAM,OAAU,OAAqC;AACzD,QAAI,eAAe,eAAe;AAChC,YAAM,IAAI,QAAc,CAAC,YAAY,MAAM,KAAK,OAAO,CAAC;AAAA,IAC1D;AAEA;AACA,QAAI;AACF,YAAM,SAAS,MAAM,GAAG;AACxB,aAAO;AAAA,IACT,UAAE;AACA;AACA,WAAK;AAAA,IACP;AAAA,EACF;AAEA,SAAO;AACT;",
  "names": []
}
