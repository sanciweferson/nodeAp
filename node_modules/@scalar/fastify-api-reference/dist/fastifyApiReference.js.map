{
  "version": 3,
  "sources": ["../src/fastifyApiReference.ts"],
  "sourcesContent": ["import type { OpenAPI } from '@scalar/openapi-types'\nimport type { FastifyBaseLogger, FastifyTypeProviderDefault, RawServerDefault } from 'fastify'\nimport fp from 'fastify-plugin'\nimport { slug } from 'github-slugger'\n\nimport type { FastifyApiReferenceHooksOptions, FastifyApiReferenceOptions } from './types'\nimport { getJavaScriptFile } from './utils/getJavaScriptFile'\n\nimport { getHtmlDocument } from '@scalar/core/libs/html-rendering'\nimport { normalize, toJson, toYaml } from '@scalar/openapi-parser'\nimport type { ApiReferenceConfiguration } from './types'\n\n/**\n * Path to the bundled Scalar JavaScript file\n */\nconst RELATIVE_JAVASCRIPT_PATH = 'js/scalar.js'\n\n// This Schema is used to hide the route from the documentation.\n// https://github.com/fastify/fastify-swagger#hide-a-route\nconst schemaToHideRoute = {\n  hide: true,\n}\n\nconst getRoutePrefix = (routePrefix?: string) => {\n  const prefix = routePrefix ?? '/reference'\n\n  // Remove trailing slash if present\n  return prefix.endsWith('/') ? prefix.slice(0, -1) : prefix\n}\n\n/**\n * Get the endpoints for the OpenAPI specification.\n */\nconst getOpenApiDocumentEndpoints = (\n  openApiDocumentEndpoints: FastifyApiReferenceOptions['openApiDocumentEndpoints'],\n) => {\n  const { json = '/openapi.json', yaml = '/openapi.yaml' } = openApiDocumentEndpoints ?? {}\n  return { json, yaml }\n}\n\n/**\n * Get the URL for the Scalar JavaScript file.\n */\nconst getJavaScriptUrl = (routePrefix?: string) =>\n  `${getRoutePrefix(routePrefix)}/${RELATIVE_JAVASCRIPT_PATH}`.replace(/\\/\\//g, '/')\n\n/**\n * The custom theme for Fastify\n */\nexport const customTheme = ``\n\n/**\n * The default configuration for Fastify\n */\nconst DEFAULT_CONFIGURATION: Partial<ApiReferenceConfiguration> = {\n  _integration: 'fastify',\n}\n\nconst fastifyApiReference = fp<\n  FastifyApiReferenceOptions,\n  RawServerDefault,\n  FastifyTypeProviderDefault,\n  FastifyBaseLogger\n>(\n  async (fastify, options) => {\n    const { configuration: givenConfiguration } = options\n\n    // Merge the defaults\n    let configuration = {\n      ...DEFAULT_CONFIGURATION,\n      ...givenConfiguration,\n    }\n\n    const specSource = (() => {\n      const { content, url } = configuration ?? {}\n      if (content) {\n        return {\n          type: 'content' as const,\n          get: () => {\n            if (typeof content === 'function') {\n              return content()\n            }\n            return content\n          },\n        }\n      }\n      if (url) {\n        return {\n          type: 'url' as const,\n          get: () => url,\n        }\n      }\n\n      if (fastify.hasPlugin('@fastify/swagger')) {\n        return {\n          type: 'swagger' as const,\n          // @ts-ignore We know that @fastify/swagger is loaded.\n          get: () => fastify.swagger() as OpenAPI.Document,\n        }\n      }\n      return void 0\n    })()\n\n    // If no OpenAPI specification is passed and @fastify/swagger isn't loaded, show a warning.\n    if (!specSource) {\n      fastify.log.warn(\n        \"[@scalar/fastify-api-reference] You didn't provide a `content` or `url`, and @fastify/swagger could not be found. Please provide one of these options.\",\n      )\n\n      return\n    }\n\n    // Read the JavaScript file once.\n    const fileContent = getJavaScriptFile()\n\n    const hooks: FastifyApiReferenceHooksOptions = {}\n    if (options.hooks) {\n      const additionalHooks: (keyof FastifyApiReferenceHooksOptions)[] = ['onRequest', 'preHandler']\n\n      for (const hook of additionalHooks) {\n        if (options.hooks[hook]) {\n          hooks[hook] = options.hooks[hook]\n        }\n      }\n    }\n\n    const getSpecFilenameSlug = async (spec: OpenAPI.Document) => {\n      // Same GitHub Slugger and default file name as in `@scalar/api-reference`, when generating the download\n      return slug(spec?.specification?.info?.title ?? 'spec')\n    }\n\n    const openApiSpecUrlJson = `${getRoutePrefix(options.routePrefix)}${getOpenApiDocumentEndpoints(options.openApiDocumentEndpoints).json}`\n    fastify.route({\n      method: 'GET',\n      url: openApiSpecUrlJson,\n      // @ts-ignore We don't know whether @fastify/swagger is loaded.\n      schema: schemaToHideRoute,\n      ...hooks,\n      ...(options.logLevel && { logLevel: options.logLevel }),\n      async handler(_, reply) {\n        const spec = normalize(specSource.get())\n        const filename: string = await getSpecFilenameSlug(spec)\n        const json = JSON.parse(toJson(spec)) // parsing minifies the JSON\n\n        return reply\n          .header('Content-Type', 'application/json')\n          .header('Content-Disposition', `filename=${filename}.json`)\n          .header('Access-Control-Allow-Origin', '*')\n          .header('Access-Control-Allow-Methods', '*')\n          .send(json)\n      },\n    })\n\n    const openApiSpecUrlYaml = `${getRoutePrefix(options.routePrefix)}${getOpenApiDocumentEndpoints(options.openApiDocumentEndpoints).yaml}`\n    fastify.route({\n      method: 'GET',\n      url: openApiSpecUrlYaml,\n      // @ts-ignore We don't know whether @fastify/swagger is loaded.\n      schema: schemaToHideRoute,\n      ...hooks,\n      ...(options.logLevel && { logLevel: options.logLevel }),\n      async handler(_, reply) {\n        const spec = normalize(specSource.get())\n        const filename: string = await getSpecFilenameSlug(spec)\n        const yaml = toYaml(spec)\n        return reply\n          .header('Content-Type', 'application/yaml')\n          .header('Content-Disposition', `filename=${filename}.yaml`)\n          .header('Access-Control-Allow-Origin', '*')\n          .header('Access-Control-Allow-Methods', '*')\n          .send(yaml)\n      },\n    })\n\n    // Redirect route without a trailing slash to force a trailing slash:\n    // We need this so the request to the JS file is relative.\n\n    // With ignoreTrailingSlash, fastify registeres both routes anyway.\n    const doesNotIgnoreTrailingSlash = fastify.initialConfig.ignoreTrailingSlash !== true\n\n    if (doesNotIgnoreTrailingSlash && getRoutePrefix(options.routePrefix)) {\n      fastify.route({\n        method: 'GET',\n        url: getRoutePrefix(options.routePrefix),\n        // @ts-ignore We don't know whether @fastify/swagger is loaded.\n        schema: schemaToHideRoute,\n        ...hooks,\n        ...(options.logLevel && { logLevel: options.logLevel }),\n        handler(_, reply) {\n          return reply.redirect(getRoutePrefix(options.routePrefix) + '/', 302)\n        },\n      })\n    }\n\n    // If no theme is passed, use the default theme.\n    fastify.route({\n      method: 'GET',\n      url: `${getRoutePrefix(options.routePrefix)}/`,\n      // We don't know whether @fastify/swagger is registered, but it doesn't hurt to add a schema anyway.\n      // @ts-ignore We don't know whether @fastify/swagger is loaded.\n      schema: schemaToHideRoute,\n      ...hooks,\n      ...(options.logLevel && { logLevel: options.logLevel }),\n      handler(_, reply) {\n        // Redirect if it's the route without a slash\n        const currentUrl = new URL(_.url, `${_.protocol}://${_.hostname}`)\n\n        if (!currentUrl.pathname.endsWith('/')) {\n          return reply.redirect(`${currentUrl.pathname}/`, 301)\n        }\n\n        /**\n         * Regardless of where we source the spec from, provide it as a URL, to have the\n         * download button point to the exposed endpoint.\n         * If the URL is explicitly passed, defer to that URL instead.\n         */\n        if (specSource.type !== 'url') {\n          configuration = {\n            ...configuration,\n            // Use a relative URL in case we're proxied\n            url: `.${getOpenApiDocumentEndpoints(options.openApiDocumentEndpoints).json}`,\n          }\n        }\n\n        // Respond with the HTML document\n        return reply.header('Content-Type', 'text/html; charset=utf-8').send(\n          getHtmlDocument(\n            {\n              // We're using the bundled JS here by default, but the user can pass a CDN URL.\n              cdn: RELATIVE_JAVASCRIPT_PATH,\n              ...configuration,\n            },\n            customTheme,\n          ),\n        )\n      },\n    })\n\n    fastify.route({\n      method: 'GET',\n      url: getJavaScriptUrl(options.routePrefix),\n      // We don't know whether @fastify/swagger is registered, but it doesn't hurt to add a schema anyway.\n      // @ts-ignore We don't know whether @fastify/swagger is loaded.\n      schema: schemaToHideRoute,\n      ...hooks,\n      ...(options.logLevel && { logLevel: options.logLevel }),\n      handler(_, reply) {\n        return reply.header('Content-Type', 'application/javascript; charset=utf-8').send(fileContent)\n      },\n    })\n  },\n  {\n    name: '@scalar/fastify-api-reference',\n  },\n)\n\nexport default fastifyApiReference\n"],
  "mappings": "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",
  "names": []
}
